// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ledgers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLedger = `-- name: CreateLedger :one
   insert into ledgers (name, description, metadata)
   values ($1, $2, $3)
returning id, uuid, created_at, updated_at, name, description, metadata
`

type CreateLedgerParams struct {
	Name        string
	Description pgtype.Text
	Metadata    []byte
}

// CreateLedger
//
//	   insert into ledgers (name, description, metadata)
//	   values ($1, $2, $3)
//	returning id, uuid, created_at, updated_at, name, description, metadata
func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) (Ledger, error) {
	row := q.db.QueryRow(ctx, createLedger, arg.Name, arg.Description, arg.Metadata)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Metadata,
	)
	return i, err
}

const getLedger = `-- name: GetLedger :one
select id, uuid, created_at, updated_at, name, description, metadata
  from ledgers
 where uuid = $1
 limit 1
`

// GetLedger
//
//	select id, uuid, created_at, updated_at, name, description, metadata
//	  from ledgers
//	 where uuid = $1
//	 limit 1
func (q *Queries) GetLedger(ctx context.Context, uuid string) (Ledger, error) {
	row := q.db.QueryRow(ctx, getLedger, uuid)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Metadata,
	)
	return i, err
}

const listLedgers = `-- name: ListLedgers :many
select id, uuid, created_at, updated_at, name, description, metadata
  from ledgers
 where metadata @> $1::jsonb
`

// ListLedgers
//
//	select id, uuid, created_at, updated_at, name, description, metadata
//	  from ledgers
//	 where metadata @> $1::jsonb
func (q *Queries) ListLedgers(ctx context.Context, dollar_1 []byte) ([]Ledger, error) {
	rows, err := q.db.Query(ctx, listLedgers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ledger
	for rows.Next() {
		var i Ledger
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLedger = `-- name: UpdateLedger :one
   update ledgers
      set name        = coalesce($2, name),
          description = coalesce($3, description),
          metadata    = coalesce($4, metadata)
    where uuid = $1
returning id, uuid, created_at, updated_at, name, description, metadata
`

type UpdateLedgerParams struct {
	Uuid        string
	Name        string
	Description pgtype.Text
	Metadata    []byte
}

// UpdateLedger
//
//	   update ledgers
//	      set name        = coalesce($2, name),
//	          description = coalesce($3, description),
//	          metadata    = coalesce($4, metadata)
//	    where uuid = $1
//	returning id, uuid, created_at, updated_at, name, description, metadata
func (q *Queries) UpdateLedger(ctx context.Context, arg UpdateLedgerParams) (Ledger, error) {
	row := q.db.QueryRow(ctx, updateLedger,
		arg.Uuid,
		arg.Name,
		arg.Description,
		arg.Metadata,
	)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Metadata,
	)
	return i, err
}
