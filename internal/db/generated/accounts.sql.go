// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
   insert into accounts (name, type, metadata, ledger_id)
   values ($1, $2, $3, $4)
returning id, uuid, created_at, updated_at, name, type, metadata, ledger_id
`

type CreateAccountParams struct {
	Name     string
	Type     AccountType
	Metadata []byte
	LedgerID int64
}

// CreateAccount
//
//	   insert into accounts (name, type, metadata, ledger_id)
//	   values ($1, $2, $3, $4)
//	returning id, uuid, created_at, updated_at, name, type, metadata, ledger_id
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Name,
		arg.Type,
		arg.Metadata,
		arg.LedgerID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Metadata,
		&i.LedgerID,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
select id, uuid, created_at, updated_at, name, type, metadata, ledger_id
  from accounts
 where id = $1
 limit 1
`

// GetAccount
//
//	select id, uuid, created_at, updated_at, name, type, metadata, ledger_id
//	  from accounts
//	 where id = $1
//	 limit 1
func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.Metadata,
		&i.LedgerID,
	)
	return i, err
}
