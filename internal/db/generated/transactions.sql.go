// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
     WITH credit_account AS (SELECT id
                               FROM accounts
                              WHERE accounts.uuid = $5::text),
          debit_account AS (SELECT id
                              FROM accounts
                             WHERE accounts.uuid = $6::text),
          ledger_id AS (SELECT id
                          FROM ledgers
                         WHERE ledgers.uuid = $7::text)
   INSERT
     INTO transactions (amount,
                        date,
                        description,
                        metadata,
                        credit_account_id,
                        debit_account_id,
                        ledger_id)
   VALUES ($1::bigint,
           $2::date,
           $3::text,
           $4::jsonb,
           (SELECT id FROM credit_account),
           (SELECT id FROM debit_account),
           (SELECT id FROM ledger_id))
RETURNING id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
`

type CreateTransactionParams struct {
	Amount            int64
	Date              pgtype.Date
	Description       string
	Metadata          []byte
	CreditAccountUuid string
	DebitAccountUuid  string
	LedgerUuid        string
}

// CreateTransaction
//
//	     WITH credit_account AS (SELECT id
//	                               FROM accounts
//	                              WHERE accounts.uuid = $5::text),
//	          debit_account AS (SELECT id
//	                              FROM accounts
//	                             WHERE accounts.uuid = $6::text),
//	          ledger_id AS (SELECT id
//	                          FROM ledgers
//	                         WHERE ledgers.uuid = $7::text)
//	   INSERT
//	     INTO transactions (amount,
//	                        date,
//	                        description,
//	                        metadata,
//	                        credit_account_id,
//	                        debit_account_id,
//	                        ledger_id)
//	   VALUES ($1::bigint,
//	           $2::date,
//	           $3::text,
//	           $4::jsonb,
//	           (SELECT id FROM credit_account),
//	           (SELECT id FROM debit_account),
//	           (SELECT id FROM ledger_id))
//	RETURNING id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Amount,
		arg.Date,
		arg.Description,
		arg.Metadata,
		arg.CreditAccountUuid,
		arg.DebitAccountUuid,
		arg.LedgerUuid,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.Date,
		&i.Description,
		&i.Metadata,
		&i.CreditAccountID,
		&i.DebitAccountID,
		&i.LedgerID,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
select id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
  from transactions
 where id = $1
 limit 1
`

// GetTransaction
//
//	select id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
//	  from transactions
//	 where id = $1
//	 limit 1
func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.Date,
		&i.Description,
		&i.Metadata,
		&i.CreditAccountID,
		&i.DebitAccountID,
		&i.LedgerID,
	)
	return i, err
}
