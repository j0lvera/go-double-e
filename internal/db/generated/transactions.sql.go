// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
insert into transactions (description, metadata, ledger_id, user_id)
values ($1, $2, $3, $4)
returning id, uuid, created_at, updated_at, description, metadata, ledger_id, user_id
`

type CreateTransactionParams struct {
	Description pgtype.Text
	Metadata    []byte
	LedgerID    int64
	UserID      int64
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Description,
		arg.Metadata,
		arg.LedgerID,
		arg.UserID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Metadata,
		&i.LedgerID,
		&i.UserID,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
select id, uuid, created_at, updated_at, description, metadata, ledger_id, user_id
from transactions
where id = $1
limit 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Metadata,
		&i.LedgerID,
		&i.UserID,
	)
	return i, err
}
