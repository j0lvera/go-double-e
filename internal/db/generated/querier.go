// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
)

type Querier interface {
	//CreateAccount
	//
	//       with ledger as (select id
	//                         from ledgers
	//                        where uuid = $4::text)
	//     insert
	//       into accounts (name, type, metadata, ledger_id)
	//     values ($1, $2, $3, (select id from ledger))
	//  returning id, uuid, created_at, updated_at, name, type, metadata, ledger_id
	CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error)
	//CreateLedger
	//
	//     insert into ledgers (name, description, metadata)
	//     values ($1, $2, $3)
	//  returning id, uuid, created_at, updated_at, name, description, metadata
	CreateLedger(ctx context.Context, arg CreateLedgerParams) (*Ledger, error)
	//CreateTransaction
	//
	//       WITH credit_account AS (SELECT id
	//                                 FROM accounts
	//                                WHERE accounts.uuid = $5::text),
	//            debit_account AS (SELECT id
	//                                FROM accounts
	//                               WHERE accounts.uuid = $6::text),
	//            ledger_id AS (SELECT id
	//                            FROM ledgers
	//                           WHERE ledgers.uuid = $7::text)
	//     INSERT
	//       INTO transactions (amount,
	//                          date,
	//                          description,
	//                          metadata,
	//                          credit_account_id,
	//                          debit_account_id,
	//                          ledger_id)
	//     VALUES ($1::bigint,
	//             $2::date,
	//             $3::text,
	//             $4::jsonb,
	//             (SELECT id FROM credit_account),
	//             (SELECT id FROM debit_account),
	//             (SELECT id FROM ledger_id))
	//  RETURNING id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
	CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error)
	//DeleteTransaction
	//
	//  delete
	//    from transactions
	//   where uuid = $1::text
	DeleteTransaction(ctx context.Context, uuid string) error
	//GetAccount
	//
	//  select id, uuid, created_at, updated_at, name, type, metadata, ledger_id
	//    from accounts
	//   where uuid = $1
	//   limit 1
	GetAccount(ctx context.Context, uuid string) (*Account, error)
	//GetLedger
	//
	//  select id, uuid, created_at, updated_at, name, description, metadata
	//    from ledgers
	//   where uuid = $1
	//   limit 1
	GetLedger(ctx context.Context, uuid string) (*Ledger, error)
	//GetTransaction
	//
	//  select id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
	//    from transactions
	//   where uuid = $1::text
	//   limit 1
	GetTransaction(ctx context.Context, uuid string) (*Transaction, error)
	//GetTransactionsCount
	//
	//    with ledger as (select ledgers.id from ledgers where ledgers.uuid = $2::text)
	//  select count(*)
	//    from transactions
	//   where ledger_id = (select id from ledger)
	//     and metadata @> $1::jsonb
	GetTransactionsCount(ctx context.Context, arg GetTransactionsCountParams) (int64, error)
	//ListAccounts
	//
	//    with ledger as (select id from ledgers where uuid = $2::text)
	//  select uuid, name, type, metadata
	//    from accounts
	//   where ledger_id = (select id from ledger)
	//     and metadata @> $1::jsonb
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]*ListAccountsRow, error)
	//ListLedgers
	//
	//  select uuid, name, description, metadata
	//    from ledgers
	//   where metadata @> $1::jsonb
	ListLedgers(ctx context.Context, dollar_1 []byte) ([]*ListLedgersRow, error)
	//ListTransactions
	//
	//    with ledger as (select ledgers.id from ledgers where ledgers.uuid = $4::text)
	//  select uuid,
	//         amount,
	//         date,
	//         description,
	//         metadata #>> '{}' AS metadata
	//    from transactions
	//   where ledger_id = (select id from ledger)
	//     and metadata @> $1::jsonb
	//   order by created_at desc
	//   limit $3 offset $2
	ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]*ListTransactionsRow, error)
	//UpdateAccount
	//
	//     update accounts
	//        set name     = coalesce($2, name),
	//            type     = coalesce($3, type),
	//            metadata = coalesce($4, metadata)
	//      where uuid = $1
	//  returning id, uuid, created_at, updated_at, name, type, metadata, ledger_id
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (*Account, error)
	//UpdateLedger
	//
	//     update ledgers
	//        set name        = coalesce($2, name),
	//            description = coalesce($3, description),
	//            metadata    = coalesce($4, metadata)
	//      where uuid = $1
	//  returning id, uuid, created_at, updated_at, name, description, metadata
	UpdateLedger(ctx context.Context, arg UpdateLedgerParams) (*Ledger, error)
	//UpdateTransaction
	//
	//       with credit_account as (select id from accounts where accounts.uuid = $6::text),
	//            debit_account as (select id from accounts where accounts.uuid = $7::text),
	//            ledger as (select id from ledgers where ledgers.uuid = $8::text)
	//     update transactions
	//        set amount            = coalesce($1::bigint, amount),
	//            date              = coalesce($2, date),
	//            description       = coalesce($3, description),
	//            metadata          = coalesce($4, metadata),
	//            credit_account_id = coalesce((select id from credit_account), credit_account_id),
	//            debit_account_id  = coalesce((select id from debit_account), debit_account_id),
	//            ledger_id         = coalesce((select id from ledger), ledger_id)
	//      where transactions.uuid = $5
	//  returning id, uuid, created_at, updated_at, amount, date, description, metadata, credit_account_id, debit_account_id, ledger_id
	UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (*Transaction, error)
}

var _ Querier = (*Queries)(nil)
