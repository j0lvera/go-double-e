// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeAsset     AccountType = "asset"
	AccountTypeLiability AccountType = "liability"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type EntryDirection string

const (
	EntryDirectionDebit  EntryDirection = "debit"
	EntryDirectionCredit EntryDirection = "credit"
)

func (e *EntryDirection) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryDirection(s)
	case string:
		*e = EntryDirection(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryDirection: %T", src)
	}
	return nil
}

type NullEntryDirection struct {
	EntryDirection EntryDirection
	Valid          bool // Valid is true if EntryDirection is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryDirection) Scan(value interface{}) error {
	if value == nil {
		ns.EntryDirection, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryDirection.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryDirection) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntryDirection), nil
}

type TransactionStatus string

const (
	TransactionStatusPending TransactionStatus = "pending"
	TransactionStatusPosted  TransactionStatus = "posted"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type Account struct {
	ID        int64
	Uuid      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Name      string
	Type      AccountType
	Metadata  []byte
	LedgerID  int64
	UserID    int64
}

type AccountBalance struct {
	ID            int64
	Uuid          string
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	Balance       int64
	AccountID     int64
	EntryID       int64
	TransactionID int64
	LedgerID      int64
	UserID        int64
}

type Entry struct {
	ID            int64
	Uuid          string
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	Amount        int64
	Direction     EntryDirection
	TransactionID int64
	AccountID     int64
}

type Ledger struct {
	ID          int64
	Uuid        string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Name        string
	Description pgtype.Text
	Metadata    []byte
	UserID      int64
}

type Transaction struct {
	ID          int64
	Uuid        string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Status      TransactionStatus
	Date        pgtype.Date
	Description pgtype.Text
	Metadata    []byte
	LedgerID    int64
	UserID      int64
}

type User struct {
	ID        int64
	Uuid      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Email     string
	Password  string
}
